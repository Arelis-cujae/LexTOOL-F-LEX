# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type LemmaType {
  lemma: String!
}

type EntryType {
  id: ID!
  letter: [String!]
  lemma: [LemmaType!]
  context: String!
  UF: String!
  source: String!
  selected: Boolean!
  criteria: String
  included: String
  frecuency: String
  documentation: [String!]
}

type CreatedEntryType {
  id: ID!
  lemma: [LemmaType!]
  letter: [String!]
  context: String!
  UF: String!
  source: String!
  selected: Boolean!
  criteria: String
  included: String
  frecuency: String
  documentation: [String!]
}

type LemarioType {
  id: ID!
  name: String
  entries: [EntryType!]!
}

type CreatedLemarioType {
  id: ID!
  name: String
  entries: [EntryType!]!
}

type AppearanceType {
  useContext: String!
}

type OcurrenceRecordType {
  id: ID!
  source: String!
  numAppearance: Float!
  appearances: [AppearanceType!]
  isVariation: Boolean
  variationUF: String
}

type CreatedOcurrenceRecordType {
  id: ID!
  source: String!
  numAppearance: Float!
  appearances: [AppearanceType!]
  isVariation: Boolean
  variationUF: String
}

type DictionaryTypeType {
  nombre: String!
}

type GenreType {
  nombre: String!
}

type Session_pType {
  nombre: String!
}

type ThemeType {
  nombre: String!
}

type TypologyType {
  nombre: String!
}

type NomenclatorType {
  id: ID!
  themes: [ThemeType!]
  genres: [GenreType!]
  sessions_p: [Session_pType!]
  dictionaryTypes: [DictionaryTypeType!]
  typologies: [TypologyType!]
}

type Query {
  findAllLemarios: [LemarioType!]!
  getLemarioByID(lemarioID: String!): LemarioType!
  findAllEntriesBylemarioID(lemarioID: String!): [EntryType!]!
  findAllEntries: [EntryType!]!
  findAllEntriesWithDocs: [EntryType!]!
  getEntryByID(entryID: String!): EntryType!
  getEntryByIDWithDocs(entryID: String!): EntryType!
  findAllEntriesWithSourceRef: [EntryType!]!
  getAllEntriesBySourceID(sourceID: String!): [EntryType!]!
  getAllEntriesToDocument: [EntryType!]!
  getAllEntriesToSelect: [EntryType!]!
  getAllIncludedEntries: [EntryType!]!
  getAllEntriesOfLemario: [EntryType!]!
  getAllExcludedEntries: [EntryType!]!
  getSourceByID(sourceID: String!): TypeSource!
  findAllSources: [TypeSource!]!
  findAllDocumentationtionSources: [TypeSource!]!
  findAllExtractionSources: [TypeSource!]!
  getAllOcurrenceRecords: [OcurrenceRecordType!]!
  getOcurrenceRecordByID(orID: String!): OcurrenceRecordType!
  getAllThemes: [ThemeType!]!
  getAllDictionaryTypes: [DictionaryTypeType!]!
  getAllSessionsP: [Session_pType!]!
  getAllTypologies: [TypologyType!]!
  getAllGenres: [GenreType!]!
}

type TypeSource {
  id: ID!
  name: String!
  ref: String!
  type: String!
  subType: String!
  stage: String!
  support: String
  bloque: String
  theme: String
  provice_p: String
  session_p: String
  magazine_type_p: String
  URL: String
  cantMin: String
  broadcastMedium: String
  typology: String
  speaker: String
  recording_date: String
  broadcast_date: String
  dictionaryType: String
  century: String
  library_name: String
  url_location: String
}

type Mutation {
  createLemario(createdLemario: NewLemarioType!): CreatedLemarioType!
  deleteLemarioByID(lemarioID: String!): LemarioType!
  updateLemarioByID(newLemario: EditedLemarioType!): LemarioType!
  createEntry(createdEntry: NewEntryType!): CreatedEntryType!
  deleteEntryByID(entryID: String!): EntryType!
  deleteEntryDocByID(orID: String!, entryID: String!): EntryType!
  updateEntryByID(newEntry: EditedEntryType!): EntryType!
  updateEntryDocumentation(newEntry: EditedEntryType!): EntryType!
  updateEntryFrecuency(entryID: String!): EntryType!
  createSource(source: NewSourcesType!): CreatedSourcesType!
  deleteSourceByID(SourceID: String!): TypeSource!
  updateSourceByID(source: EditedSource!): TypeSource!
  createOcurrenceRecord(newOcurrenceRecord: NewOcurrenceRecordType!): CreatedOcurrenceRecordType!
  deleteOcurrenceRecordByID(orID: String!): OcurrenceRecordType!
  editOcurrenceRecord(newOcurrenceRecord: NewOcurrenceRecordType!): OcurrenceRecordType!
  createNomenclator(newNomenclator: NewNomenclatorType!): NomenclatorType!
  addTheme(newTheme: NewThemeType!): NomenclatorType!
  addGenres(newGenre: NewGenreType!): NomenclatorType!
  addTypology(newTypology: NewTypologyType!): NomenclatorType!
  addSessionP(newSessionP: NewSession_pType!): NomenclatorType!
  addDictionaryType(newDictionaryType: NewDictionaryTypeType!): NomenclatorType!
  deleteTheme(nombre: String!): NomenclatorType!
  deleteGenre(nombre: String!): NomenclatorType!
  deleteSessionP(nombre: String!): NomenclatorType!
  deleteTypology(nombre: String!): NomenclatorType!
  deleteDictionaryType(nombre: String!): NomenclatorType!
}

input NewLemarioType {
  name: String
  entries: [NewEntryType!]
}

input NewEntryType {
  lemma: [NewLemmaType!]
  letter: [String!]
  context: String!
  UF: String!
  source: String!
  selected: Boolean!
  criteria: String
  included: String
  frecuency: String
}

input NewLemmaType {
  lemma: String!
}

input EditedLemarioType {
  id: ID!
  name: String
}

input EditedEntryType {
  id: ID!
  lemma: [NewLemmaType!]
  letter: [String!]
  context: String
  UF: String
  source: String
  selected: Boolean
  criteria: String
  included: String
  frecuency: String
  documentation: [String!]
}

type CreatedSourcesType {
  id: ID!
  name: String!
  ref: String!
  type: String!
  subType: String!
  stage: String!
  support: String
  bloque: String
  theme: String
  provice_p: String
  session_p: String
  magazine_type_p: String
  URL: String
  cantMin: String
  broadcastMedium: String
  typology: String
  speaker: String
  recording_date: String
  broadcast_date: String
  dictionaryType: String
  century: String
  library_name: String
  url_location: String
}

input NewSourcesType {
  name: String!
  ref: String!
  type: String!
  subType: String!
  stage: String!
  support: String
  bloque: String
  theme: String
  provice_p: String
  session_p: String
  magazine_type_p: String
  URL: String
  cantMin: String
  broadcastMedium: String
  typology: String
  speaker: String
  recording_date: String
  broadcast_date: String
  dictionaryType: String
  century: String
  library_name: String
  url_location: String
}

input EditedSource {
  id: ID!
  name: String!
  ref: String!
  type: String!
  subType: String!
  stage: String!
  support: String
  bloque: String
  theme: String
  provice_p: String
  session_p: String
  magazine_type_p: String
  URL: String
  cantMin: String
  broadcastMedium: String
  typology: String
  speaker: String
  recording_date: String
  broadcast_date: String
  dictionaryType: String
  century: String
  library_name: String
  url_location: String
}

input NewOcurrenceRecordType {
  source: String!
  numAppearance: Float!
  appearances: [NewAppearanceType!]
  isVariation: Boolean
  variationUF: String
}

input NewAppearanceType {
  useContext: String!
}

input NewNomenclatorType {
  themes: [NewThemeType!]
  genres: [NewGenreType!]
  sessions_p: [NewSession_pType!]
  dictionaryTypes: [NewDictionaryTypeType!]
  typologies: [NewTypologyType!]
}

input NewThemeType {
  nombre: String!
}

input NewGenreType {
  nombre: String!
}

input NewSession_pType {
  nombre: String!
}

input NewDictionaryTypeType {
  nombre: String!
}

input NewTypologyType {
  nombre: String!
}
